C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE CAN1
OBJECT MODULE PLACED IN .\Objects\CAN1.obj
COMPILER INVOKED BY: C:\Keil_C51\C51\BIN\C51.EXE CAN1.C OPTIMIZE(8,SPEED) BROWSE INCDIR(..\keil) DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\CAN1.lst) TABS(2) OBJECT(.\Objects\CAN1.obj)

line level    source

   1          //------------------------------------------------------------------------------
   2          // CAN1.c
   3          //------------------------------------------------------------------------------
   4          #include <c8051f040.h>                          // SFR declarations
   5          #include "Yaoping.h"
   6          // CAN Protocol Register Index for CAN0ADR, from TABLE 18.1 of the C8051F040
   7          // datasheet
   8          ////////////////////////////////////////////////////////////////////////////////
   9          #define CANCTRL            0x00                 //Control Register
  10          #define CANSTAT            0x01                 //Status register
  11          #define ERRCNT             0x02                 //Error Counter Register
  12          #define BITREG             0x03                 //Bit Timing Register
  13          #define INTREG             0x04                 //Interrupt Low Byte Register
  14          #define CANTSTR            0x05                 //Test register
  15          #define BRPEXT             0x06                 //BRP Extension         Register
  16          ////////////////////////////////////////////////////////////////////////////////
  17          //IF1 Interface Registers
  18          ////////////////////////////////////////////////////////////////////////////////
  19          #define IF1CMDRQST         0x08                 //IF1 Command Rest      Register
  20          #define IF1CMDMSK          0x09                 //IF1 Command Mask      Register
  21          #define IF1MSK1            0x0A                 //IF1 Mask1             Register
  22          #define IF1MSK2            0x0B                 //IF1 Mask2             Register
  23          #define IF1ARB1            0x0C                 //IF1 Arbitration 1     Register
  24          #define IF1ARB2            0x0D                 //IF1 Arbitration 2     Register
  25          #define IF1MSGC            0x0E                 //IF1 Message Control   Register
  26          #define IF1DATA1           0x0F                 //IF1 Data A1           Register
  27          #define IF1DATA2           0x10                 //IF1 Data A2           Register
  28          #define IF1DATB1           0x11                 //IF1 Data B1           Register
  29          #define IF1DATB2           0x12                 //IF1 Data B2           Register
  30          ////////////////////////////////////////////////////////////////////////////////
  31          //IF2 Interface Registers
  32          ////////////////////////////////////////////////////////////////////////////////
  33          #define IF2CMDRQST         0x20                 //IF2 Command Rest      Register
  34          #define IF2CMDMSK          0x21                 //IF2 Command Mask      Register
  35          #define IF2MSK1            0x22                 //IF2 Mask1             Register
  36          #define IF2MSK2            0x23                 //IF2 Mask2             Register
  37          #define IF2ARB1            0x24                 //IF2 Arbitration 1     Register
  38          #define IF2ARB2            0x25                 //IF2 Arbitration 2     Register
  39          #define IF2MSGC            0x26                 //IF2 Message Control   Register
  40          #define IF2DATA1           0x27                 //IF2 Data A1           Register
  41          #define IF2DATA2           0x28                 //IF2 Data A2           Register
  42          #define IF2DATB1           0x29                 //IF2 Data B1           Register
  43          #define IF2DATB2           0x2A                 //IF2 Data B2           Register
  44          ////////////////////////////////////////////////////////////////////////////////
  45          //Message Handler Registers
  46          ////////////////////////////////////////////////////////////////////////////////
  47          #define TRANSREQ1          0x40                 //Transmission Rest1 Register
  48          #define TRANSREQ2          0x41                 //Transmission Rest2 Register
  49          #define NEWDAT1            0x48                 //New Data 1            Register
  50          #define NEWDAT2            0x49                 //New Data 2            Register
  51          #define INTPEND1           0x50                 //Interrupt Pending 1   Register
  52          #define INTPEND2           0x51                 //Interrupt Pending 2   Register
  53          #define MSGVAL1            0x58                 //Message Valid 1       Register
  54          #define MSGVAL2            0x59                 //Message Valid 2       Register
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 2   

  55          //-----------------------------------------------------------------------------
  56          // C8051F040的SFR定义
  57          //-----------------------------------------------------------------------------
  58          sfr16 CAN0DAT = 0xD8;
  59          
  60          //-----------------------------------------------------------------------------
  61          // 全局变量
  62          //-----------------------------------------------------------------------------
  63          xdata CANRECDATBUF CANRXBUF_ZKB;
  64          xdata volatile unsigned char CANaddress1 = 0;
  65          xdata volatile unsigned char CANINDEX = 0;
  66          xdata volatile unsigned char CAN1FaultCounter = 0;
  67          
  68          
  69          
  70          //外部函数
  71          ////////////////////////////////////////////////////////////////////////////////
  72          void init_can1_1 (void)
  73          {
  74   1          ////////////////////////////////////////////////////////////////////////////////
  75   1          // Configure CAN communications
  76   1          //
  77   1          // IF1 used for procedures calles by main program
  78   1          // IF2 used for interrupt service procedure can1_receive
  79   1          //
  80   1          ////////////////////////////////////////////////////////////////////////////////
  81   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
  82   1          SFRPAGE  = CONFIG_PAGE;        //Port SFR's on Configuration page
  83   1          XBR3     |= 0x80;     // Configure CAN TX pin (CTX) as push-pull digital output
  84   1          EA = 0;
  85   1          // Clear CAN RAM
  86   1          clear_msg_objects();
  87   1          // Initialize message object to transmit data
  88   1          init_msg_object_TX(TX_MSGNUM_ZKB, (IDSET + 64));        // 发出本地数据
  89   1          // Initialize message object to receive data
  90   1          init_msg_object_RX(RX_MSGNUM_ZKB, IDSET);               // 接收主控板动作指令数据
  91   1          // init_msg_object_RX(RX_MSGNUM_Y_Shaft,98);               // 接收Y轴动作OK反馈指令数据
  92   1          //init_msg_object_RX(RX_MSGNUM_ZKB_Union,Address_Union);  // 接收主控板始发包或结束包数据
  93   1          //init_msg_object_RX(RX_MSGNUM_ZKB_1,35);                 // 接收主控板动作指令数据
  94   1          // Enable CAN interrupts in CIP-51
  95   1          EIE2 |= 0x20;
  96   1          // 设置CAN中断优先级高
  97   1          EIP2 |= 0x20;
  98   1          //Function call to start CAN
  99   1          start_CAN();
 100   1          //Global enable 8051 interrupts
 101   1          EA = 1;
 102   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 103   1      }
 104          
 105          
 106          
 107          //Clear Message Objects
 108          void clear_msg_objects (void)
 109          {
 110   1          unsigned char i;
 111   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 112   1          SFRPAGE  = CAN0_PAGE;
 113   1          CAN0ADR  = IF1CMDMSK;    // Point to Command Mask Register 1
 114   1          CAN0DATL = 0xFF;         // Set direction to WRITE all IF registers to Msg Obj
 115   1          for (i = 1; i < 33; i++)
 116   1          {
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 3   

 117   2              CAN0ADR = IF1CMDRQST; // Write blank (reset) IF registers to each msg obj
 118   2              CAN0DATL = i;
 119   2          }
 120   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 121   1      }
 122          
 123          //Initialize Message Object for RX
 124          void init_msg_object_RX (char MsgNum, unsigned int id)
 125          {
 126   1          unsigned int temp;
 127   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 128   1          SFRPAGE  = CAN0_PAGE;
 129   1          CAN0ADR  = IF2CMDMSK;  // Point to Command Mask 1
 130   1          CAN0DAT  = 0x00BB;     // Set to WRITE, and alter all Msg Obj except ID MASK
 131   1      
 132   1          CAN0ADR  = IF2ARB1;    // Point to arbitration1 register
 133   1          CAN0DAT  = 0x0000;     // Set arbitration1 ID to "0"
 134   1          temp = id << 2;
 135   1          temp &= 0x1fff;
 136   1          temp |= 0x8000;
 137   1          CAN0DAT  = temp;     // Arb2 high byte:Set MsgVal bit, no extended ID,
 138   1          // Dir = RECEIVE
 139   1          CAN0DAT  = 0x1488;//0x488;    // Msg Cntrl: set RXIE,
 140   1          // remote frame function disabled,
 141   1          //接收产生中断
 142   1          CAN0ADR  = IF2CMDRQST; // Point to Command Request reg.
 143   1          CAN0DATL = MsgNum;     // Select Msg Obj passed into function parameter list
 144   1          // --initiates write to Msg Obj
 145   1          // 3-6 CAN clock cycles to move IF register contents to the Msg Obj in CAN RAM
 146   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 147   1      }
 148          
 149          //Initialize Message Object for TX
 150          void init_msg_object_TX (char MsgNum, unsigned int id)
 151          {
 152   1          unsigned int temp;
 153   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 154   1          SFRPAGE = CAN0_PAGE;
 155   1          CAN0ADR = IF1CMDMSK;  // Point to Command Mask 1
 156   1          CAN0DAT = 0x00B3;     // Set to WRITE, & alter all Msg Obj except ID MASK bits
 157   1          CAN0ADR = IF1ARB1;    // Point to arbitration1 register
 158   1          CAN0DAT = 0x0000;     // Set arbitration1 ID to highest priority
 159   1          temp = id << 2;
 160   1          temp &= 0x1fff;
 161   1          temp |= 0xa000;
 162   1          CAN0DAT = temp;     // Autoincrement to Arb2 high byte:
 163   1          // Set MsgVal bit, no extended ID, Dir = WRITE
 164   1          CAN0DAT = 0x1088;//0x0088;     // Msg Cntrl: DLC = 8,
 165   1          //remote frame function not enabled,
 166   1          //发送不产生中断
 167   1          CAN0ADR = IF1CMDRQST; // Point to Command Request reg.
 168   1          CAN0DAT = MsgNum;     // Select Msg Obj passed into function parameter list
 169   1          // --initiates write to Msg Obj
 170   1          // 3-6 CAN clock cycles to move IF reg contents to the Msg Obj in CAN RAM.
 171   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 172   1      }
 173          
 174          void start_CAN (void)
 175          {
 176   1          /* Calculation of the CAN bit timing :
 177   1      
 178   1            System clock        f_sys = 11.0592 MHz.
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 4   

 179   1            System clock period t_sys = 1/f_sys = 90.422454 ns.
 180   1            CAN time quantum       tq = t_sys (at BRP = 0)
 181   1      
 182   1            Desired bit rate is 1 MBit/s, desired bit time is 1000 ns.
 183   1            Actual bit time = 11 tq = 994.642ns
 184   1            Actual bit rate is 1.00539 MBit/s = Desired bit rate+0.5381%
 185   1      
 186   1              CAN bus length = 10 m, with 5 ns/m signal delay time.
 187   1              Propagation delay time : 2*(transceiver loop delay + bus line delay) = 400 ns
 188   1              (maximum loop delay between CAN nodes)
 189   1      
 190   1              Prop_Seg = 5 tq = 452 ns ( >= 400 ns).
 191   1              Sync_Seg = 1 tq
 192   1      
 193   1                Phase_seg1 + Phase_Seg2 = (11-6) tq = 5 tq
 194   1                Phase_seg1 <= Phase_Seg2,  =>  Phase_seg1 = 2 tq and Phase_Seg2 = 3 tq
 195   1                SJW = (min(Phase_Seg1, 4) tq = 2 tq
 196   1      
 197   1                TSEG1 = (Prop_Seg + Phase_Seg1 - 1) = 6
 198   1                TSEG2 = (Phase_Seg2 - 1)            = 2
 199   1                SJW_p = (SJW - 1)                   = 1
 200   1      
 201   1                  Bit Timing Register = BRP + SJW_p*0x0040 = TSEG1*0x0100 + TSEG2*0x1000 = 2640
 202   1      
 203   1                  Clock tolerance df :
 204   1      
 205   1                    A: df < min(Phase_Seg1, Phase_Seg2) / (2 * (13*bit_time - Phase_Seg2))
 206   1                    B: df < SJW / (20 * bit_time)
 207   1      
 208   1                    A: df < 2/(2*(13*11-3)) = 1/(141-3) = 1/138 = 0.7246%
 209   1                    B: df < 2/(20*11)                   = 1/110 = 0.9091%
 210   1      
 211   1                      Actual clock tolerance is 0.7246% - 0.5381% = 0.1865% (no problem for quartz)
 212   1      
 213   1                      注：SJW越长，抗噪能力越强，且Prop_Seg+Phase_Seg1越长，抗噪能力越强。SJW不能大于
 214   1                      Phase_Seg1和Phase_Seg2中如何一个值。
 215   1                      详见c8051f040.pdf
 216   1            */
 217   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 218   1          SFRPAGE  = CAN0_PAGE;
 219   1          CAN0CN  |= 0x41;       // Configuration Change Enable CCE and INIT
 220   1          CAN0ADR  = BITREG   ;  // Point to Bit Timing register
 221   1      
 222   1          if(BPSSET == 3)
 223   1          {
 224   2              CAN0DAT  = 0x2640; // (at BRP = 0) bps=1.00539MHz
 225   2          }
 226   1          else if(BPSSET == 2)
 227   1          {
 228   2              CAN0DAT  = 0x2641; // (at BRP = 1) bps=502693Hz
 229   2          }
 230   1          else if(BPSSET == 1)
 231   1          {
 232   2              CAN0DAT  = 0x2643; // (at BRP = 3) bps=251347Hz
 233   2          }
 234   1          else
 235   1          {
 236   2              CAN0DAT  = 0x2647; // (at BRP = 7) bps=125673Hz
 237   2          }
 238   1      
 239   1          CAN0CN = 0x0A; //模块中断开启//错误中断开启
 240   1          // Clear CCE and INIT bits, starts CAN state machine
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 5   

 241   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 242   1      }
 243          
 244          
 245          void can1_transmit(char MsgNum, unsigned char *buf )
 246          {
 247   1          unsigned char i;
 248   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 249   1          WDTCN = 0xA5;
 250   1          EA = 0;
 251   1          SFRPAGE  = CAN0_PAGE;  // IF1 already set up for TX
 252   1          CAN0ADR  = IF1CMDMSK;  // Point to Command Mask 1
 253   1          CAN0DAT  = 0x0087;     // Config to WRITE to CAN RAM, write data bytes,
 254   1          // set TXrqst/NewDat, Clr IntPnd
 255   1          CAN0ADR  = IF1DATA1;   // Point to 1st byte of Data Field
 256   1          for(i = 0 ; i < 8 ; i += 2)
 257   1          {
 258   2              CAN0DATH = buf[i + 1];
 259   2              CAN0DATL = buf[i];
 260   2              WDTCN = 0xA5;
 261   2          }
 262   1          CAN0ADR  = IF1CMDRQST; // Point to Command Request Reg.
 263   1          CAN0DATL = MsgNum;     // Move new data for TX to Msg Obj "MsgNum"
 264   1          //T0Counter2=0;
 265   1          CAN0ADR = TRANSREQ1;
 266   1          delay_ms(100);
 267   1          if ((CAN0DAT & (0x0001 << (MsgNum - 1)) ) != 0) //检查消息对象的传输任务是否完成
 268   1          {
 269   2              CAN1FaultCounter = CAN1FaultCounter + 1;
 270   2              SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 271   2              EA = 1;
 272   2              return; //延时30ms  超时退出
 273   2          }
 274   1          EA = 1;
 275   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 276   1      }
 277          
 278          
 279          // Receive Data from the IF2 buffer
 280          void can1_receive (char MsgNum, unsigned char *buf)
 281          {
 282   1          unsigned char i;
 283   1          char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 284   1          SFRPAGE  = CAN0_PAGE;
 285   1          CAN0ADR  = IF2CMDMSK;  // Point to Command Mask 1
 286   1          CAN0DATL  = 0x0F;
 287   1          EA = 0;
 288   1          CAN0ADR  = IF2CMDRQST;// Point to Command Request Reg.
 289   1          CAN0DATL = MsgNum;    // Move new data for RX from Msg Obj "MsgNum"
 290   1          // Move new data to a
 291   1      
 292   1          CAN0ADR  = IF2DATA1;  // Point to 1st byte of Data Field
 293   1          for(i = 0 ; i < 8 ; i += 2)
 294   1          {
 295   2              buf[i + 1] = CAN0DATH ;
 296   2              buf[i] = CAN0DATL ;
 297   2          }
 298   1          EA = 1;
 299   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 300   1      }
 301          
 302          ////////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 6   

 303          //Interrupt Service Routine
 304          ////////////////////////////////////////////////////////////////////////////////
 305          void CAN1_ISR (void) interrupt 19
 306          {
 307   1          unsigned char status;
 308   1          unsigned int  intstate;
 309   1          unsigned char temp;
 310   1          unsigned char isum = 0;
 311   1          unsigned char sum = 0;
 312   1      
 313   1          temp = SFRPAGE;
 314   1          SFRPAGE  = CAN0_PAGE;
 315   1          status = CAN0STA;
 316   1          WDTCN = 0xA5;
 317   1      
 318   1          if ((status & 0x10) != 0) // RxOk is set, interrupt caused by reception
 319   1          {
 320   2              CAN0STA = (CAN0STA & 0xEF) | 0x07;     // Reset RxOk, set LEC to NoChange
 321   2              /* read message number from CAN INTREG */
 322   2              CAN0ADR  = INTPEND1;
 323   2              intstate = CAN0DAT;
 324   2              if( intstate & (0x0001 << (RX_MSGNUM_ZKB - 1)) )  // 接收主控板动作指令
 325   2              {
 326   3                  WDTCN = 0xA5;
 327   3                  can1_receive (RX_MSGNUM_ZKB, CANRXBUF_ZKB.buf); //接收并存储消息
 328   3                  switch(CANRXBUF_ZKB.buf[1])
 329   3                  {
 330   4                  case 0xA0://88
 331   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 332   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 333   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 334   4                      Servoparadisplace = CANRXBUF_ZKB.buf[3];
 335   4                      Servoparadisplace = Servoparadisplace << 8;
 336   4                      Servoparadisplace = Servoparadisplace + CANRXBUF_ZKB.buf[4];
 337   4                      Servoparadisplace = Servoparadisplace << 8;
 338   4                      Servoparadisplace = Servoparadisplace + CANRXBUF_ZKB.buf[5];
 339   4                      Servoparadisplace = Servoparadisplace << 8;;
 340   4                      Servoparadisplace = Servoparadisplace + CANRXBUF_ZKB.buf[6];
 341   4                      Runmode = 0; //手动运行模式
 342   4                      CANINFOR_FLAG = YES;
 343   4                      break;
 344   4      
 345   4                  case 0xA1://9A
 346   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 347   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 348   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 349   4                      Servoparaspeed = CANRXBUF_ZKB.buf[3];
 350   4                      Servoparaspeed = Servoparaspeed << 8;
 351   4                      Servoparaspeed = Servoparaspeed + CANRXBUF_ZKB.buf[4];
 352   4                      Servoparaspeed = Servoparaspeed << 8;
 353   4                      Servoparaspeed = Servoparaspeed + CANRXBUF_ZKB.buf[5];
 354   4                      Servoparaspeed = Servoparaspeed << 8;;
 355   4                      Servoparaspeed = Servoparaspeed + CANRXBUF_ZKB.buf[6];
 356   4                      Runmode = 0; //手动运行模式
 357   4                      CANINFOR_FLAG = YES;
 358   4                      break;
 359   4      
 360   4                  case 0xA4:
 361   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 362   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 363   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 364   4                      Servopara[CANINDEX * 16 + 0] = CANRXBUF_ZKB.buf[3];
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 7   

 365   4                      Servopara[CANINDEX * 16 + 1] = CANRXBUF_ZKB.buf[4];
 366   4                      Servopara[CANINDEX * 16 + 2] = CANRXBUF_ZKB.buf[5];
 367   4                      Servopara[CANINDEX * 16 + 3] = CANRXBUF_ZKB.buf[6];
 368   4                      Runmode = 0; //手动运行模式
 369   4                      CANINFOR_FLAG = YES;
 370   4                      break;
 371   4      
 372   4                  case 0xA5:
 373   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 374   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 375   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 376   4                      Servopara[CANINDEX * 16 + 4] = CANRXBUF_ZKB.buf[3];
 377   4                      Servopara[CANINDEX * 16 + 5] = CANRXBUF_ZKB.buf[4];
 378   4                      Servopara[CANINDEX * 16 + 6] = CANRXBUF_ZKB.buf[5];
 379   4                      Servopara[CANINDEX * 16 + 7] = CANRXBUF_ZKB.buf[6];
 380   4                      Runmode = 0; //手动运行模式
 381   4                      CANINFOR_FLAG = YES;
 382   4                      break;
 383   4      
 384   4                  case 0xA6:
 385   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 386   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 387   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 388   4                      Servopara[CANINDEX * 16 + 8] = CANRXBUF_ZKB.buf[3];
 389   4                      Servopara[CANINDEX * 16 + 9] = CANRXBUF_ZKB.buf[4];
 390   4                      Servopara[CANINDEX * 16 + 10] = CANRXBUF_ZKB.buf[5];
 391   4                      Servopara[CANINDEX * 16 + 11] = CANRXBUF_ZKB.buf[6];
 392   4                      Runmode = 0; //手动运行模式
 393   4                      CANINFOR_FLAG = YES;
 394   4                      break;
 395   4      
 396   4                  case 0xA7:
 397   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 398   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 399   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 400   4                      Servopara[CANINDEX * 16 + 12] = CANRXBUF_ZKB.buf[3];
 401   4                      Servopara[CANINDEX * 16 + 13] = CANRXBUF_ZKB.buf[4];
 402   4                      Servopara[CANINDEX * 16 + 14] = CANRXBUF_ZKB.buf[5];
 403   4                      Servopara[CANINDEX * 16 + 15] = CANRXBUF_ZKB.buf[6];
 404   4                      Runmode = 0; //手动运行模式
 405   4                      CANINFOR_FLAG = YES;
 406   4                      break;
 407   4      
 408   4                  case 0xA8:
 409   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 410   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 411   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 412   4                      Servopara[CANINDEX * 9 + 80] = CANRXBUF_ZKB.buf[3];
 413   4                      Servopara[CANINDEX * 9 + 81] = CANRXBUF_ZKB.buf[4];
 414   4                      Servopara[CANINDEX * 9 + 82] = CANRXBUF_ZKB.buf[5];
 415   4                      Servopara[CANINDEX * 9 + 83] = CANRXBUF_ZKB.buf[6];
 416   4                      Runmode = 0; //手动运行模式
 417   4                      CANINFOR_FLAG = YES;
 418   4                      break;
 419   4      
 420   4                  case 0xA9:
 421   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 422   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 423   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 424   4                      Servopara[CANINDEX * 9 + 84] = CANRXBUF_ZKB.buf[5];
 425   4                      Servopara[CANINDEX * 9 + 85] = CANRXBUF_ZKB.buf[6];
 426   4                      Runmode = 0; //手动运行模式
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 8   

 427   4                      CANINFOR_FLAG = YES;
 428   4                      break;
 429   4      
 430   4                  case 0xAA:
 431   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 432   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 433   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 434   4                      Servopara[CANINDEX * 9 + 86] = CANRXBUF_ZKB.buf[5];
 435   4                      Servopara[CANINDEX * 9 + 87] = CANRXBUF_ZKB.buf[6];
 436   4                      Runmode = 0; //手动运行模式
 437   4                      CANINFOR_FLAG = YES;
 438   4                      break;
 439   4      
 440   4                  case 0xAB:
 441   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 442   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 443   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 444   4                      Servopara[CANINDEX * 9 + 88] = CANRXBUF_ZKB.buf[6];
 445   4                      Runmode = 0; //手动运行模式
 446   4                      CANINFOR_FLAG = YES;
 447   4                      break;
 448   4      
 449   4                  case 0xAC://
 450   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 451   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 452   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 453   4                      write_to_flash();
 454   4                      Runmode = 0; //手动运行模式
 455   4                      break;
 456   4      
 457   4                  case 0xC0://读取所有工位信息
 458   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 459   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 460   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 461   4                      Runmode = 0; //手动运行模式
 462   4                      break;
 463   4      
 464   4                  case 0xD0://0X66
 465   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 466   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 467   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 468   4                      Runmode = 0; //手动运行模式
 469   4                      break;
 470   4      
 471   4                  case 0x11://0X55
 472   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 473   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 474   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 475   4                      Runmode = 0; //手动运行模式
 476   4                      break;
 477   4      
 478   4                  case 0x22://0X66
 479   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 480   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 481   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 482   4                      Runmode = 0; //手动运行模式
 483   4                      break;
 484   4      
 485   4                  case 0xD2://0X55
 486   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 487   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 488   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 9   

 489   4                      Runmode = 0; //手动运行模式
 490   4                      break;
 491   4      
 492   4                  case 0xD3:
 493   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 494   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 495   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 496   4                      Runmode = 0; //手动运行模式
 497   4                      break;
 498   4      
 499   4                  case 0xD4://原点复归
 500   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 501   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 502   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 503   4                      Runmode = 0; //手动运行模式
 504   4                      break;
 505   4      
 506   4                  case 0xD5://测试
 507   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 508   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 509   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 510   4                      Runmode = 0; //手动运行模式
 511   4                      break;
 512   4      
 513   4                      /****************直流电机控制指令*****************/
 514   4                  case 0xD6://高空输送线开启
 515   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 516   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 517   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 518   4                      Runmode = 0; //手动运行模式
 519   4                      break;
 520   4      
 521   4                  case 0xD7://高空输送线停止
 522   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 523   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 524   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 525   4                      Runmode = 0; //手动运行模式
 526   4                      break;
 527   4      
 528   4                  case 0xD8://药瓶倾倒正反
 529   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 530   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 531   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 532   4                      Runmode = 0; //手动运行模式
 533   4                      break;
 534   4      
 535   4                  case 0xD9://药瓶倾倒停止
 536   4                      CANaddress1 = CANRXBUF_ZKB.buf[0];
 537   4                      nCANcomand = CANRXBUF_ZKB.buf[1];
 538   4                      CANINDEX = CANRXBUF_ZKB.buf[2];
 539   4                      Runmode = 0; //手动运行模式
 540   4                      break;
 541   4                      /*************************************************/
 542   4      
 543   4                  case 0xFE:
 544   4                      sum = 0;
 545   4                      for(isum = 0; isum < 7; isum++)
 546   4                      {
 547   5                          sum = sum + CANRXBUF_ZKB.buf[isum];
 548   5                      }
 549   4                      if(CANRXBUF_ZKB.total_ctl_buf.checkout == sum)
 550   4                      {
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 10  

 551   5                          if(system_crtl.AUTOsystem_command != 0) //误操作退出
 552   5                          {
 553   6                              ;//故障报警
 554   6                          }
 555   5                          else
 556   5                          {
 557   6                              CANaddress1 = CANRXBUF_ZKB.buf[0];
 558   6                              nCANcomand = CANRXBUF_ZKB.buf[1];
 559   6                              CANINDEX = CANRXBUF_ZKB.buf[2];
 560   6                              system_crtl.AUTOsystem_command = 1;
 561   6                              AUTOCMD_CHECK = 1;
 562   6      
 563   6                              T0Counter3 = 51; //尽快的定时发送清除状态类表
 564   6                              Runmode = 1; //自动运行
 565   6                          }
 566   5                      }
 567   4                      break;
 568   4      
 569   4                      //added begin
 570   4                      //借用任务自动分配函数，实现翻转输送线翻转
 571   4                      //手段：设定不同的起始步骤值system_crtl.AUTOsystem_command
 572   4                  case 0xB0:
 573   4                      sum = 0;
 574   4                      for(isum = 0; isum < 7; isum++)
 575   4                      {
 576   5                          sum = sum + CANRXBUF_ZKB.buf[isum];
 577   5                      }
 578   4                      if(CANRXBUF_ZKB.total_ctl_buf.checkout == sum)
 579   4                      { 
 580   5                          if(system_crtl.AUTOsystem_command != 0) //误操作退出
 581   5                          {
 582   6                              ;//故障报警
 583   6                          }
 584   5                          else
 585   5                          {
 586   6                              CANaddress1 = CANRXBUF_ZKB.buf[0];
 587   6                              nCANcomand = CANRXBUF_ZKB.buf[1];
 588   6                              CANINDEX = CANRXBUF_ZKB.buf[2];
 589   6                              system_crtl.AUTOsystem_command = 9;
 590   6                              AUTOCMD_CHECK = 1;
 591   6      
 592   6                              T0Counter3 = 51; //尽快的定时发送清除状态类表
 593   6                              Runmode = 1; //自动运行
 594   6                          }
 595   5                      }
 596   4                      break;
 597   4                      //added end
 598   4      
 599   4      
 600   4                  case 0xC2://输送线自动命令结束主动上传信息返回
 601   4                      //CANaddress1=CANRXBUF_ZKB.buf[0];
 602   4                      //nCANcomand=CANRXBUF_ZKB.buf[1];
 603   4                      //CANINDEX=CANRXBUF_ZKB.buf[2];
 604   4                      Runmode = 1;
 605   4                      //返回信息处理
 606   4                      //CANaddress1=0;
 607   4                      //nCANcomand=0;
 608   4                      //CANINDEX=0;
 609   4                      AUTOCMD_STATE = 0;
 610   4                      break;
 611   4      
 612   4                  case 0xFC://0X66
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 11  

 613   4                      //CANaddress1=CANRXBUF_ZKB.buf[0];
 614   4                      sum = 0;
 615   4                      for(isum = 0; isum < 7; isum++)
 616   4                      {
 617   5                          sum = sum + CANRXBUF_ZKB.buf[isum];
 618   5                      }
 619   4                      if(CANRXBUF_ZKB.total_ctl_buf.checkout == sum)
 620   4                      {
 621   5                          AUTOCMD_CHECK = CANRXBUF_ZKB.buf[1]; //AUTOCMD_CHECK查询命令规避其他运行中的命令
 622   5                          //CANINDEX=CANRXBUF_ZKB.buf[2];
 623   5                          Runmode = 1; //自动运行
 624   5                      }
 625   4                      break;
 626   4      
 627   4                  case 0xFB://0X66
 628   4                      //CANaddress1=CANRXBUF_ZKB.buf[0];
 629   4                      if(system_crtl.AUTOsystem_command != 0) //误操作退出
 630   4                      {
 631   5                          ;//故障报警
 632   5                      }
 633   4                      else
 634   4                      {
 635   5                          CANaddress1 = CANRXBUF_ZKB.buf[0];
 636   5                          nCANcomand = CANRXBUF_ZKB.buf[1];
 637   5                          CANINDEX = CANRXBUF_ZKB.buf[2];
 638   5                          system_crtl.AUTOsystem_command = 1;
 639   5                          //AUTOCMD_CHECK=1;
 640   5      
 641   5                          T0Counter3 = 51; //尽快的定时发送清除状态类表
 642   5                          Runmode = 1; //自动运行
 643   5                      }
 644   4                      break;
 645   4      
 646   4                  default:
 647   4                      break;
 648   4                  }
 649   3              }
 650   2              WDTCN = 0xA5;  //喂狗
 651   2              /*if( intstate&(0x0001<<(RX_MSGNUM_ZKB_1-1)) )        // 接收主控板动作指令
 652   2              {
 653   2              {
 654   2              can1_receive (RX_MSGNUM_ZKB_1,CANRXBUF_ZKB.buf);
 655   2              CANRefresh_ZKB=YES;
 656   2              }
 657   2              }
 658   2      
 659   2              if( intstate&(0x0001<<(RX_MSGNUM_ZKB_Union-1)) )  // 接收主控板公共通道数据
 660   2              {
 661   2              {
 662   2              can1_receive (RX_MSGNUM_ZKB_Union,CANRXBUF_ZKB.buf);
 663   2              CANRefresh_ZKB=YES;
 664   2              }
 665   2              }
 666   2      
 667   2              if( intstate&(0x0001<<(RX_MSGNUM_Y_Shaft-1)) )    // 接收Y轴通道数据
 668   2              {
 669   2              {
 670   2              can1_receive (RX_MSGNUM_Y_Shaft,CANRXBUF_Y.buf);
 671   2              CANRefresh_Y=YES;
 672   2              }
 673   2              }*/
 674   2      
C51 COMPILER V9.56.0.0   CAN1                                                              04/28/2017 09:29:56 PAGE 12  

 675   2              LED8 = YES; //故障指示灭
 676   2          }
 677   1          if ((status & 0x08) != 0) // TxOk is set, interrupt caused by transmision
 678   1          {
 679   2              CAN0STA = (CAN0STA & 0xF7) | 0x07;    // Reset TxOk, set LEC to NoChange
 680   2          }
 681   1          if (((status & 0x07) != 0) && ((status & 0x07) != 7)) // Error interrupt, LEC changed
 682   1          {
 683   2              /* error handling ? */
 684   2              CAN0STA = CAN0STA | 0x07;            // Set LEC to NoChange
 685   2              if( (status & 0x80) != 0) //总线关闭
 686   2              {
 687   3                  CAN0CN  &= 0xFE;        //恢复正常模式
 688   3              }
 689   2              LED8 = NO ; //故障指示
 690   2          }
 691   1          SFRPAGE = temp;
 692   1      }
 693          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2363    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
